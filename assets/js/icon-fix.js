// Icon Fix JavaScript - Automatische Icon-Ersetzung
document.addEventListener('DOMContentLoaded', function() {
    
    // Icon-Mapping: Bootstrap Icons zu Emoji/Unicode
    const iconMapping = {
        'bi-translate': 'üåç',
        'bi-house-door': 'üè†', 
        'bi-collection': 'üìö',
        'bi-pencil-square': '‚úèÔ∏è',
        'bi-check2-circle': '‚úÖ',
        'bi-people': 'üë•',
        'bi-gear': '‚öôÔ∏è',
        'bi-person-circle': 'üë§',
        'bi-mortarboard': 'üéì',
        'bi-person-workspace': 'üë®‚Äçüè´',
        'bi-shield-check': 'üõ°Ô∏è',
        'bi-box-arrow-right': 'üö™',
        'bi-arrow-up': '‚¨ÜÔ∏è',
        'bi-star': '‚≠ê',
        'bi-info-circle': '‚ÑπÔ∏è',
        'bi-envelope': '‚úâÔ∏è',
        'bi-box-arrow-in-right': 'üîë',
        'bi-person-plus': 'üë§‚ûï',
        'bi-rocket-takeoff': 'üöÄ',
        'bi-book': 'üìñ',
        'bi-play-fill': '‚ñ∂Ô∏è',
        'bi-eye': 'üëÅÔ∏è',
        'bi-eye-slash': 'üôà',
        'bi-lock': 'üîí',
        'bi-key': 'üîë',
        'bi-send': 'üì§',
        'bi-arrow-left': '‚¨ÖÔ∏è',
        'bi-exclamation-triangle': '‚ö†Ô∏è',
        'bi-check-circle': '‚úÖ',
        'bi-check-circle-fill': '‚úÖ',
        'bi-x-circle': '‚ùå',
        'bi-lightning-charge': '‚ö°',
        'bi-headset': 'üéß',
        'bi-graph-up-arrow': 'üìà',
        'bi-trophy': 'üèÜ',
        'bi-trophy-fill': 'üèÜ',
        'bi-collection-fill': 'üìã',
        'bi-mortarboard-fill': 'üéì',
        'bi-file-text': 'üìÑ',
        'bi-shield-fill-check': 'üõ°Ô∏è',
        'bi-calendar': 'üìÖ',
        'bi-clock': 'üïê',
        'bi-download': '‚¨áÔ∏è',
        'bi-upload': '‚¨ÜÔ∏è',
        'bi-search': 'üîç',
        'bi-heart': '‚ù§Ô∏è',
        'bi-heart-fill': '‚ù§Ô∏è',
        'bi-plus': '‚ûï',
        'bi-dash': '‚ûñ',
        'bi-x': '‚ùå',
        'bi-question-circle': '‚ùì',
        'bi-bell': 'üîî',
        'bi-chat': 'üí¨',
        'bi-phone': 'üìû',
        'bi-camera': 'üì∑',
        'bi-mic': 'üé§',
        'bi-volume-up': 'üîä',
        'bi-volume-mute': 'üîá'
    };

    // Font Awesome zu Emoji Mapping
    const faMapping = {
        'fa-language': 'üåç',
        'fa-home': 'üè†',
        'fa-th-large': 'üìö',
        'fa-edit': '‚úèÔ∏è',
        'fa-check-circle': '‚úÖ',
        'fa-users': 'üë•',
        'fa-cog': '‚öôÔ∏è',
        'fa-user-circle': 'üë§',
        'fa-graduation-cap': 'üéì',
        'fa-chalkboard-teacher': 'üë®‚Äçüè´',
        'fa-shield-alt': 'üõ°Ô∏è',
        'fa-sign-out-alt': 'üö™',
        'fa-arrow-up': '‚¨ÜÔ∏è',
        'fa-star': '‚≠ê',
        'fa-info-circle': '‚ÑπÔ∏è',
        'fa-envelope': '‚úâÔ∏è',
        'fa-sign-in-alt': 'üîë',
        'fa-user-plus': 'üë§‚ûï',
        'fa-rocket': 'üöÄ'
    };

    // Funktion um Icons zu ersetzen
    function replaceIcons() {
        // Bootstrap Icons ersetzen
        Object.keys(iconMapping).forEach(iconClass => {
            const elements = document.querySelectorAll('.' + iconClass);
            elements.forEach(element => {
                // Pr√ºfen ob das Icon bereits korrekt geladen ist
                if (!hasValidIcon(element)) {
                    replaceWithEmoji(element, iconMapping[iconClass]);
                }
            });
        });

        // Font Awesome Icons ersetzen
        Object.keys(faMapping).forEach(iconClass => {
            const elements = document.querySelectorAll('.' + iconClass);
            elements.forEach(element => {
                if (!hasValidIcon(element)) {
                    replaceWithEmoji(element, faMapping[iconClass]);
                }
            });
        });

        // Fallback f√ºr alle anderen Icons
        const allIcons = document.querySelectorAll('[class*="bi-"], [class*="fa-"]');
        allIcons.forEach(element => {
            if (!hasValidIcon(element) && !element.hasAttribute('data-icon-replaced')) {
                replaceWithEmoji(element, '‚óè');
            }
        });
    }

    // Pr√ºfen ob ein Icon korrekt geladen wurde
    function hasValidIcon(element) {
        const computed = window.getComputedStyle(element, '::before');
        const content = computed.getPropertyValue('content');
        
        // Wenn content nicht 'none' oder leer ist, dann ist ein Icon vorhanden
        return content && content !== 'none' && content !== '""' && content !== "''";
    }

    // Icon durch Emoji ersetzen
    function replaceWithEmoji(element, emoji) {
        // Verhindere mehrfache Ersetzung
        if (element.hasAttribute('data-icon-replaced')) {
            return;
        }

        element.setAttribute('data-icon-replaced', 'true');
        
        // Verschiedene Ersetzungsmethoden probieren
        
        // Methode 1: CSS content √ºberschreiben
        const style = document.createElement('style');
        style.textContent = `
            [data-icon-id="${element.getAttribute('data-icon-id') || generateId()}"]::before {
                content: "${emoji}" !important;
                font-family: "Apple Color Emoji", "Segoe UI Emoji", "Noto Color Emoji", sans-serif !important;
                font-size: 1.4em !important;
                display: inline-block !important;
                width: 1.2em !important;
                text-align: center !important;
                line-height: 1 !important;
                vertical-align: middle !important;
            }
        `;
        document.head.appendChild(style);
        
        if (!element.getAttribute('data-icon-id')) {
            element.setAttribute('data-icon-id', generateId());
        }

        // Methode 2: Direkter Text-Content (Fallback)
        if (!hasValidIcon(element)) {
            element.innerHTML = `<span style="font-family: Apple Color Emoji, Segoe UI Emoji, Noto Color Emoji, sans-serif; font-size: 1.4em; display: inline-block; width: 1.2em; text-align: center; vertical-align: middle;">${emoji}</span>`;
        }

        // Methode 3: Data-Attribut f√ºr CSS
        element.setAttribute('data-icon-emoji', emoji);
    }

    // Eindeutige ID generieren
    function generateId() {
        return 'icon-' + Math.random().toString(36).substr(2, 9);
    }

    // Icons beim Laden der Seite ersetzen
    replaceIcons();

    // Icons nach kurzer Verz√∂gerung nochmal pr√ºfen (falls CSS noch l√§dt)
    setTimeout(replaceIcons, 500);
    setTimeout(replaceIcons, 1000);

    // MutationObserver f√ºr dynamisch hinzugef√ºgte Icons
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach(function(node) {
                    if (node.nodeType === 1) { // Element node
                        const icons = node.querySelectorAll('[class*="bi-"], [class*="fa-"]');
                        icons.forEach(icon => {
                            setTimeout(() => {
                                if (!hasValidIcon(icon)) {
                                    const classList = Array.from(icon.classList);
                                    const iconClass = classList.find(cls => cls.startsWith('bi-') || cls.startsWith('fa-'));
                                    if (iconClass && (iconMapping[iconClass] || faMapping[iconClass])) {
                                        replaceWithEmoji(icon, iconMapping[iconClass] || faMapping[iconClass]);
                                    }
                                }
                            }, 100);
                        });
                    }
                });
            }
        });
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    // Zus√§tzliche CSS-Regeln f√ºr bessere Icon-Darstellung
    const additionalCSS = document.createElement('style');
    additionalCSS.textContent = `
        /* Emoji Icons Styling */
        [data-icon-emoji]::before {
            content: attr(data-icon-emoji) !important;
            font-family: "Apple Color Emoji", "Segoe UI Emoji", "Noto Color Emoji", "Android Emoji", sans-serif !important;
            font-size: 1.4em !important;
            display: inline-block !important;
            width: 1.2em !important;
            text-align: center !important;
            line-height: 1 !important;
            vertical-align: middle !important;
            margin-right: 0.3em !important;
        }

        /* Spezielle Gr√∂√üen f√ºr verschiedene Kontexte */
        .navbar-brand [data-icon-emoji]::before {
            font-size: 1.8em !important;
            width: 1em !important;
            margin-right: 0.2em !important;
        }

        .nav-link [data-icon-emoji]::before {
            font-size: 1.3em !important;
            margin-right: 0.4em !important;
        }

        .btn [data-icon-emoji]::before {
            font-size: 1.1em !important;
            margin-right: 0.3em !important;
        }

        .role-badge [data-icon-emoji]::before {
            font-size: 1em !important;
            margin-right: 0.2em !important;
        }

        /* Responsive Gr√∂√üen */
        @media (max-width: 768px) {
            [data-icon-emoji]::before {
                font-size: 1.6em !important;
            }
            
            .navbar-brand [data-icon-emoji]::before {
                font-size: 2em !important;
            }
            
            .nav-link [data-icon-emoji]::before {
                font-size: 1.5em !important;
            }
        }

        /* Fallback f√ºr Browser die Emojis nicht unterst√ºtzen */
        @supports not (font-family: "Apple Color Emoji") {
            [data-icon-emoji]::before {
                content: "‚ñ†" !important;
                font-size: 1.2em !important;
                color: currentColor !important;
            }
        }

        /* Text-Icons als ultimativer Fallback */
        [data-icon-replaced] {
            position: relative;
        }

        [data-icon-replaced]:empty::after {
            content: "ICON";
            display: inline-block;
            background: rgba(0, 0, 0, 0.1);
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.7em;
            font-weight: bold;
            margin-right: 0.3em;
            vertical-align: middle;
        }
    `;
    document.head.appendChild(additionalCSS);

    // Debug-Funktion (optional)
    window.debugIcons = function() {
        const allIcons = document.querySelectorAll('[class*="bi-"], [class*="fa-"]');
        console.log('Total icons found:', allIcons.length);
        
        allIcons.forEach((icon, index) => {
            const classes = Array.from(icon.classList).filter(c => c.startsWith('bi-') || c.startsWith('fa-'));
            const hasValid = hasValidIcon(icon);
            const isReplaced = icon.hasAttribute('data-icon-replaced');
            
            console.log(`Icon ${index + 1}:`, {
                classes: classes,
                hasValidIcon: hasValid,
                isReplaced: isReplaced,
                element: icon
            });
        });
    };

    // Auto-Fix f√ºr h√§ufige Icon-Probleme
    function autoFixCommonIssues() {
        // Bootstrap Icons CDN nochmal laden falls nicht verf√ºgbar
        if (!window.getComputedStyle(document.querySelector('.bi-house-door, .bi-translate'), '::before').getPropertyValue('content')) {
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.href = 'https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css';
            document.head.appendChild(link);
            
            // Nach dem Laden nochmal pr√ºfen
            link.onload = function() {
                setTimeout(replaceIcons, 200);
            };
        }

        // Font Awesome als Backup laden
        if (!document.querySelector('link[href*="font-awesome"]')) {
            const faLink = document.createElement('link');
            faLink.rel = 'stylesheet';
            faLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css';
            document.head.appendChild(faLink);
        }
    }

    // Auto-Fix ausf√ºhren
    autoFixCommonIssues();

    // Globale Funktionen verf√ºgbar machen
    window.iconFix = {
        replaceIcons: replaceIcons,
        debugIcons: window.debugIcons,
        hasValidIcon: hasValidIcon
    };

    console.log('Icon Fix JavaScript loaded. Use window.iconFix.debugIcons() to debug icon issues.');
});